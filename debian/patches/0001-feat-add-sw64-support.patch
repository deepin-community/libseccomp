From 9a79354ec9f61bafc184383d2d02b0e39aec7af1 Mon Sep 17 00:00:00 2001
From: hudeng <hudeng@deepin.org>
Date: Fri, 30 May 2025 08:34:23 +0800
Subject: [PATCH] feat: add sw64 support

---
 doc/man/man1/scmp_sys_resolver.1  |   2 +-
 include/seccomp.h.in              |  14 +
 src/Makefile.am                   |   1 +
 src/arch-sw_64-syscalls.c         | 466 ++++++++++++++++++++++++++++++
 src/arch-sw_64.c                  |  38 +++
 src/arch-sw_64.h                  |  37 +++
 src/arch-syscall-dump.c           |   4 +
 src/arch.c                        |   7 +
 src/gen_pfc.c                     |   2 +
 tests/16-sim-arch_basic.c         |   3 +
 tests/16-sim-arch_basic.py        |   1 +
 tests/23-sim-arch_all_le_basic.c  |   3 +
 tests/23-sim-arch_all_le_basic.py |   1 +
 tests/regression                  |   3 +-
 tools/scmp_arch_detect.c          |   3 +
 tools/scmp_bpf_disasm.c           |   2 +
 tools/scmp_bpf_sim.c              |   2 +
 tools/util.c                      |   2 +
 tools/util.h                      |  11 +
 19 files changed, 600 insertions(+), 2 deletions(-)
 create mode 100644 src/arch-sw_64-syscalls.c
 create mode 100644 src/arch-sw_64.c
 create mode 100644 src/arch-sw_64.h

diff --git a/doc/man/man1/scmp_sys_resolver.1 b/doc/man/man1/scmp_sys_resolver.1
index 37d48c1..155386a 100644
--- a/doc/man/man1/scmp_sys_resolver.1
+++ b/doc/man/man1/scmp_sys_resolver.1
@@ -34,7 +34,7 @@ special manner by libseccomp depending on the operation.
 .B \-a \fIARCH
 The architecture to use for resolving the system call.  Valid
 .I ARCH
-values are "x86", "x86_64", "x32", "arm", "aarch64", "loongarch64", "mips",
+values are "x86", "x86_64", "x32", "arm", "aarch64", "loongarch64", "sw_64", "mips",
 "mipsel", "mips64", "mipsel64", "mips64n32", "mipsel64n32", "parisc",
 "parisc64", "ppc", "ppc64", "ppc64le", "s390", "s390x", "sheb" and "sh".
 .TP
diff --git a/include/seccomp.h.in b/include/seccomp.h.in
index 285989d..6c7f0a9 100644
--- a/include/seccomp.h.in
+++ b/include/seccomp.h.in
@@ -151,6 +151,20 @@ struct scmp_arg_cmp {
 #endif /* AUDIT_ARCH_AARCH64 */
 #define SCMP_ARCH_AARCH64	AUDIT_ARCH_AARCH64
 
+/**
+ * The SW64 architecture tokens
+ */
+/* 64-bit SW64 audit support is not upstream yet */
+#ifndef AUDIT_ARCH_SW64
+#ifndef EM_SW64
+#define EM_SW64 0x9916
+#endif
+#define AUDIT_ARCH_SW64	(EM_SW64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
+#endif /* AUDIT_ARCH_SW64 */
+#define SCMP_ARCH_SW64	AUDIT_ARCH_SW64
+/* Avoid breaking packages that built with old libseccomp-dev */
+#define SCMP_ARCH_SW_64 SCMP_ARCH_SW64
+
 /**
  * The LoongArch architecture tokens
  */
diff --git a/src/Makefile.am b/src/Makefile.am
index 8c39d9e..55ff56c 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -32,6 +32,7 @@ SOURCES_ALL = \
 	arch-x32.h arch-x32.c \
 	arch-arm.h arch-arm.c \
 	arch-aarch64.h arch-aarch64.c \
+	arch-sw_64.h arch-sw_64.c arch-sw_64-syscalls.c \
 	arch-loongarch64.h arch-loongarch64.c \
 	arch-mips.h arch-mips.c \
 	arch-mips64.h arch-mips64.c \
diff --git a/src/arch-sw_64-syscalls.c b/src/arch-sw_64-syscalls.c
new file mode 100644
index 0000000..3f54e2b
--- /dev/null
+++ b/src/arch-sw_64-syscalls.c
@@ -0,0 +1,466 @@
+/**
+ * Enhanced Seccomp sw64 Syscall Table
+ *
+ * Copyright (c) 2018 deepin Inc. <xiabin@deepin.com>
+ * Author: Xia Bin <snyh@snyh.org>
+
+ */
+
+/*
+ * This library is free software; you can redistribute it and/or modify it
+ * under the terms of version 2.1 of the GNU Lesser General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This library is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this library; if not, see <http://www.gnu.org/licenses>.
+ */
+
+#include <string.h>
+
+#include <seccomp.h>
+
+#include "arch.h"
+#include "arch-sw_64.h"
+
+/* NOTE: based on Linux 4.9.180 with cat /usr/include/asm/unistd_64.h |grep NR | sed 's/#define __NR_//'  | awk '{print "{\""$1"\"" "," $2 "},"}'  */
+const struct arch_syscall_def sw_64_syscall_table[] = { \
+    {"exit",1},
+    {"fork",2},
+    {"read",3},
+    {"write",4},
+    {"close",6},
+    {"osf_wait4",7},
+    {"link",9},
+    {"unlink",10},
+    {"chdir",12},
+    {"fchdir",13},
+    {"mknod",14},
+    {"chmod",15},
+    {"chown",16},
+    {"brk",17},
+    {"lseek",19},
+    {"getxpid",20},
+    {"osf_mount",21},
+    {"umount2",22},
+    {"setuid",23},
+    {"getxuid",24},
+    {"ptrace",26},
+    {"access",33},
+    {"sync",36},
+    {"kill",37},
+    {"setpgid",39},
+    {"dup",41},
+    {"pipe",42},
+    {"osf_set_program_attributes",43},
+    {"open",45},
+    {"getxgid",47},
+    {"osf_sigprocmask",48},
+    {"acct",51},
+    {"sigpending",52},
+    {"ioctl",54},
+    {"symlink",57},
+    {"readlink",58},
+    {"execve",59},
+    {"umask",60},
+    {"chroot",61},
+    {"getpgrp",63},
+    {"getpagesize",64},
+    {"vfork",66},
+    {"stat",67},
+    {"lstat",68},
+    {"mmap",71},
+    {"munmap",73},
+    {"mprotect",74},
+    {"madvise",75},
+    {"vhangup",76},
+    {"getgroups",79},
+    {"setgroups",80},
+    {"setpgrp",82},
+    {"osf_setitimer",83},
+    {"osf_getitimer",86},
+    {"gethostname",87},
+    {"sethostname",88},
+    {"getdtablesize",89},
+    {"dup2",90},
+    {"fstat",91},
+    {"fcntl",92},
+    {"osf_select",93},
+    {"poll",94},
+    {"fsync",95},
+    {"setpriority",96},
+    {"socket",97},
+    {"connect",98},
+    {"accept",99},
+    {"getpriority",100},
+    {"send",101},
+    {"recv",102},
+    {"sigreturn",103},
+    {"bind",104},
+    {"setsockopt",105},
+    {"listen",106},
+    {"sigsuspend",111},
+    {"osf_sigstack",112},
+    {"recvmsg",113},
+    {"sendmsg",114},
+    {"osf_gettimeofday",116},
+    {"osf_getrusage",117},
+    {"getsockopt",118},
+    {"socketcall",119},
+    {"readv",120},
+    {"writev",121},
+    {"osf_settimeofday",122},
+    {"fchown",123},
+    {"fchmod",124},
+    {"recvfrom",125},
+    {"setreuid",126},
+    {"setregid",127},
+    {"rename",128},
+    {"truncate",129},
+    {"ftruncate",130},
+    {"flock",131},
+    {"setgid",132},
+    {"sendto",133},
+    {"shutdown",134},
+    {"socketpair",135},
+    {"mkdir",136},
+    {"rmdir",137},
+    {"osf_utimes",138},
+    {"getpeername",141},
+    {"getrlimit",144},
+    {"setrlimit",145},
+    {"setsid",147},
+    {"quotactl",148},
+    {"getsockname",150},
+    {"sigaction",156},
+    {"osf_getdirentries",159},
+    {"osf_statfs",160},
+    {"osf_fstatfs",161},
+    {"osf_getdomainname",165},
+    {"setdomainname",166},
+    {"bpf",170},
+    {"userfaultfd",171},
+    {"membarrier",172},
+    {"mlock2",173},
+    {"getpid",174},
+    {"getppid",175},
+    {"getuid",176},
+    {"geteuid",177},
+    {"getgid",178},
+    {"getegid",179},
+    {"osf_swapon",199},
+    {"msgctl",200},
+    {"msgget",201},
+    {"msgrcv",202},
+    {"msgsnd",203},
+    {"semctl",204},
+    {"semget",205},
+    {"semop",206},
+    {"osf_utsname",207},
+    {"lchown",208},
+    {"shmat",209},
+    {"shmctl",210},
+    {"shmdt",211},
+    {"shmget",212},
+    {"msync",217},
+    {"osf_stat",224},
+    {"osf_lstat",225},
+    {"osf_fstat",226},
+    {"osf_statfs64",227},
+    {"osf_fstatfs64",228},
+    {"statfs64",229},
+    {"fstatfs64",230},
+    {"getpgid",233},
+    {"getsid",234},
+    {"sigaltstack",235},
+    {"osf_sysinfo",241},
+    {"osf_proplist_syscall",244},
+    {"osf_usleep_thread",251},
+    {"sysfs",254},
+    {"osf_getsysinfo",256},
+    {"osf_setsysinfo",257},
+    {"bdflush",300},
+    {"sethae",301},
+    {"mount",302},
+    {"old_adjtimex",303},
+    {"swapoff",304},
+    {"getdents",305},
+    {"create_module",306},
+    {"init_module",307},
+    {"delete_module",308},
+    {"get_kernel_syms",309},
+    {"syslog",310},
+    {"reboot",311},
+    {"clone",312},
+    {"uselib",313},
+    {"mlock",314},
+    {"munlock",315},
+    {"mlockall",316},
+    {"munlockall",317},
+    {"sysinfo",318},
+    {"_sysctl",319},
+    {"oldumount",321},
+    {"swapon",322},
+    {"times",323},
+    {"personality",324},
+    {"setfsuid",325},
+    {"setfsgid",326},
+    {"ustat",327},
+    {"statfs",328},
+    {"fstatfs",329},
+    {"sched_setparam",330},
+    {"sched_getparam",331},
+    {"sched_setscheduler",332},
+    {"sched_getscheduler",333},
+    {"sched_yield",334},
+    {"sched_get_priority_max",335},
+    {"sched_get_priority_min",336},
+    {"sched_rr_get_interval",337},
+    {"afs_syscall",338},
+    {"uname",339},
+    {"nanosleep",340},
+    {"mremap",341},
+    {"nfsservctl",342},
+    {"setresuid",343},
+    {"getresuid",344},
+    {"pciconfig_read",345},
+    {"pciconfig_write",346},
+    {"query_module",347},
+    {"prctl",348},
+    {"pread64",349},
+    {"pwrite64",350},
+    {"rt_sigreturn",351},
+    {"rt_sigaction",352},
+    {"rt_sigprocmask",353},
+    {"rt_sigpending",354},
+    {"rt_sigtimedwait",355},
+    {"rt_sigqueueinfo",356},
+    {"rt_sigsuspend",357},
+    {"select",358},
+    {"gettimeofday",359},
+    {"settimeofday",360},
+    {"getitimer",361},
+    {"setitimer",362},
+    {"utimes",363},
+    {"getrusage",364},
+    {"wait4",365},
+    {"adjtimex",366},
+    {"getcwd",367},
+    {"capget",368},
+    {"capset",369},
+    {"sendfile",370},
+    {"setresgid",371},
+    {"getresgid",372},
+    {"dipc",373},
+    {"pivot_root",374},
+    {"mincore",375},
+    {"pciconfig_iobase",376},
+    {"getdents64",377},
+    {"gettid",378},
+    {"readahead",379},
+    {"tkill",381},
+    {"setxattr",382},
+    {"lsetxattr",383},
+    {"fsetxattr",384},
+    {"getxattr",385},
+    {"lgetxattr",386},
+    {"fgetxattr",387},
+    {"listxattr",388},
+    {"llistxattr",389},
+    {"flistxattr",390},
+    {"removexattr",391},
+    {"lremovexattr",392},
+    {"fremovexattr",393},
+    {"futex",394},
+    {"sched_setaffinity",395},
+    {"sched_getaffinity",396},
+    {"tuxcall",397},
+    {"io_setup",398},
+    {"io_destroy",399},
+    {"io_getevents",400},
+    {"io_submit",401},
+    {"io_cancel",402},
+    {"io_pgetevents",403},
+    {"rseq",404},
+    {"exit_group",405},
+    {"lookup_dcookie",406},
+    {"epoll_create",407},
+    {"epoll_ctl",408},
+    {"epoll_wait",409},
+    {"remap_file_pages",410},
+    {"set_tid_address",411},
+    {"restart_syscall",412},
+    {"fadvise64",413},
+    {"timer_create",414},
+    {"timer_settime",415},
+    {"timer_gettime",416},
+    {"timer_getoverrun",417},
+    {"timer_delete",418},
+    {"clock_settime",419},
+    {"clock_gettime",420},
+    {"clock_getres",421},
+    {"clock_nanosleep",422},
+    {"semtimedop",423},
+    {"tgkill",424},
+    {"stat64",425},
+    {"lstat64",426},
+    {"fstat64",427},
+    {"vserver",428},
+    {"mbind",429},
+    {"get_mempolicy",430},
+    {"set_mempolicy",431},
+    {"mq_open",432},
+    {"mq_unlink",433},
+    {"mq_timedsend",434},
+    {"mq_timedreceive",435},
+    {"mq_notify",436},
+    {"mq_getsetattr",437},
+    {"waitid",438},
+    {"add_key",439},
+    {"request_key",440},
+    {"keyctl",441},
+    {"ioprio_set",442},
+    {"ioprio_get",443},
+    {"inotify_init",444},
+    {"inotify_add_watch",445},
+    {"inotify_rm_watch",446},
+    {"fdatasync",447},
+    {"kexec_load",448},
+    {"migrate_pages",449},
+    {"openat",450},
+    {"mkdirat",451},
+    {"mknodat",452},
+    {"fchownat",453},
+    {"futimesat",454},
+    {"fstatat64",455},
+    {"unlinkat",456},
+    {"renameat",457},
+    {"linkat",458},
+    {"symlinkat",459},
+    {"readlinkat",460},
+    {"fchmodat",461},
+    {"faccessat",462},
+    {"pselect6",463},
+    {"ppoll",464},
+    {"unshare",465},
+    {"set_robust_list",466},
+    {"get_robust_list",467},
+    {"splice",468},
+    {"sync_file_range",469},
+    {"tee",470},
+    {"vmsplice",471},
+    {"move_pages",472},
+    {"getcpu",473},
+    {"epoll_pwait",474},
+    {"utimensat",475},
+    {"signalfd",476},
+    {"timerfd",477},
+    {"eventfd",478},
+    {"recvmmsg",479},
+    {"fallocate",480},
+    {"timerfd_create",481},
+    {"timerfd_settime",482},
+    {"timerfd_gettime",483},
+    {"signalfd4",484},
+    {"eventfd2",485},
+    {"epoll_create1",486},
+    {"dup3",487},
+    {"pipe2",488},
+    {"inotify_init1",489},
+    {"preadv",490},
+    {"pwritev",491},
+    {"rt_tgsigqueueinfo",492},
+    {"perf_event_open",493},
+    {"fanotify_init",494},
+    {"fanotify_mark",495},
+    {"prlimit64",496},
+    {"name_to_handle_at",497},
+    {"open_by_handle_at",498},
+    {"clock_adjtime",499},
+    {"syncfs",500},
+    {"setns",501},
+    {"accept4",502},
+    {"sendmmsg",503},
+    {"process_vm_readv",504},
+    {"process_vm_writev",505},
+    {"kcmp",506},
+    {"finit_module",507},
+    {"sched_setattr",508},
+    {"sched_getattr",509},
+    {"renameat2",510},
+    {"getrandom",511},
+    {"memfd_create",512},
+    {"execveat",513},
+    {"seccomp",514},
+    {"copy_file_range",515},
+    {"preadv2",516},
+    {"pwritev2",517},
+    {"statx",518},
+    { "sysmips", __PNR_sysmips },
+    { NULL, __NR_SCMP_ERROR },
+};
+
+/**
+ * Resolve a syscall name to a number
+ * @param name the syscall name
+ *
+ * Resolve the given syscall name to the syscall number using the syscall table.
+ * Returns the syscall number on success, including negative pseudo syscall
+ * numbers; returns __NR_SCMP_ERROR on failure.
+ *
+ */
+int sw_64_syscall_resolve_name(const char *name)
+{
+	unsigned int iter;
+	const struct arch_syscall_def *table = sw_64_syscall_table;
+
+	/* XXX - plenty of room for future improvement here */
+	for (iter = 0; table[iter].name != NULL; iter++) {
+		if (strcmp(name, table[iter].name) == 0)
+			return table[iter].num;
+	}
+
+	return __NR_SCMP_ERROR;
+}
+
+/**
+ * Resolve a syscall number to a name
+ * @param num the syscall number
+ *
+ * Resolve the given syscall number to the syscall name using the syscall table.
+ * Returns a pointer to the syscall name string on success, including pseudo
+ * syscall names; returns NULL on failure.
+ *
+ */
+const char *sw_64_syscall_resolve_num(int num)
+{
+	unsigned int iter;
+	const struct arch_syscall_def *table = sw_64_syscall_table;
+
+	/* XXX - plenty of room for future improvement here */
+	for (iter = 0; table[iter].num != __NR_SCMP_ERROR; iter++) {
+		if (num == table[iter].num)
+			return table[iter].name;
+	}
+
+	return NULL;
+}
+
+
+/**
+ * Iterate through the syscall table and return the syscall mapping
+ * @param spot the offset into the syscall table
+ *
+ * Return the syscall mapping at position @spot or NULL on failure.  This
+ * function should only ever be used internally by libseccomp.
+ *
+ */
+const struct arch_syscall_def *sw_64_syscall_iterate(unsigned int spot)
+{
+	/* XXX - no safety checks here */
+	return &sw_64_syscall_table[spot];
+}
diff --git a/src/arch-sw_64.c b/src/arch-sw_64.c
new file mode 100644
index 0000000..1fbd29a
--- /dev/null
+++ b/src/arch-sw_64.c
@@ -0,0 +1,38 @@
+/**
+ * Enhanced Seccomp sw64 Syscall Table
+ *
+ * Copyright (c) 2018 deepin Inc. <xiabin@deepin.com>
+ * Author: Xia Bin <snyh@snyh.org>
+ */
+
+/*
+ * This library is free software; you can redistribute it and/or modify it
+ * under the terms of version 2.1 of the GNU Lesser General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This library is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this library; if not, see <http://www.gnu.org/licenses>.
+ */
+
+#include <stdlib.h>
+#include <errno.h>
+#include <linux/audit.h>
+
+#include "arch.h"
+#include "arch-sw_64.h"
+
+const struct arch_def arch_def_sw_64 = {
+	.token = SCMP_ARCH_SW64,
+	.token_bpf = AUDIT_ARCH_SW64,
+	.size = ARCH_SIZE_64,
+	.endian = ARCH_ENDIAN_LITTLE,
+	.syscall_resolve_name = sw_64_syscall_resolve_name,
+	.syscall_resolve_num = sw_64_syscall_resolve_num,
+	.syscall_rewrite = NULL,
+	.rule_add = NULL,
+};
diff --git a/src/arch-sw_64.h b/src/arch-sw_64.h
new file mode 100644
index 0000000..0fae91d
--- /dev/null
+++ b/src/arch-sw_64.h
@@ -0,0 +1,37 @@
+/**
+ * Enhanced Seccomp sw64 Syscall Table
+ *
+ * Copyright (c) 2018 deepin Inc. <xiabin@deepin.com>
+ * Author: Xia Bin <snyh@snyh.org>
+ */
+
+/*
+ * This library is free software; you can redistribute it and/or modify it
+ * under the terms of version 2.1 of the GNU Lesser General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This library is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this library; if not, see <http://www.gnu.org/licenses>.
+ */
+
+#ifndef _ARCH_SW64_H
+#define _ARCH_SW64_H
+
+#include <inttypes.h>
+
+#include "arch.h"
+#include "system.h"
+
+extern const struct arch_def arch_def_sw_64;
+
+int sw_64_syscall_resolve_name(const char *name);
+const char *sw_64_syscall_resolve_num(int num);
+
+const struct arch_syscall_def *sw_64_syscall_iterate(unsigned int spot);
+
+#endif
diff --git a/src/arch-syscall-dump.c b/src/arch-syscall-dump.c
index abc1680..63db480 100644
--- a/src/arch-syscall-dump.c
+++ b/src/arch-syscall-dump.c
@@ -35,6 +35,7 @@
 #include "arch-x32.h"
 #include "arch-arm.h"
 #include "arch-loongarch64.h"
+#include "arch-sw_64.h"
 #include "arch-mips.h"
 #include "arch-mips64.h"
 #include "arch-mips64n32.h"
@@ -111,6 +112,9 @@ int main(int argc, char *argv[])
 		case SCMP_ARCH_LOONGARCH64:
 			sys = loongarch64_syscall_iterate(iter);
 			break;
+		case SCMP_ARCH_SW64:
+			sys = sw_64_syscall_iterate(iter);
+			break;
 		case SCMP_ARCH_MIPS:
 		case SCMP_ARCH_MIPSEL:
 			sys = mips_syscall_iterate(iter);
diff --git a/src/arch.c b/src/arch.c
index 8c45fa3..ed270e3 100644
--- a/src/arch.c
+++ b/src/arch.c
@@ -36,6 +36,7 @@
 #include "arch-arm.h"
 #include "arch-aarch64.h"
 #include "arch-loongarch64.h"
+#include "arch-sw_64.h"
 #include "arch-mips.h"
 #include "arch-mips64.h"
 #include "arch-mips64n32.h"
@@ -66,6 +67,8 @@ const struct arch_def *arch_def_native = &arch_def_arm;
 const struct arch_def *arch_def_native = &arch_def_aarch64;
 #elif __loongarch64
 const struct arch_def *arch_def_native = &arch_def_loongarch64;
+#elif __sw_64__
+const struct arch_def *arch_def_native = &arch_def_sw_64;
 #elif __mips__ && _MIPS_SIM == _MIPS_SIM_ABI32
 #if __MIPSEB__
 const struct arch_def *arch_def_native = &arch_def_mips;
@@ -146,6 +149,8 @@ const struct arch_def *arch_def_lookup(uint32_t token)
 		return &arch_def_aarch64;
 	case SCMP_ARCH_LOONGARCH64:
 		return &arch_def_loongarch64;
+	case SCMP_ARCH_SW64:
+		return &arch_def_sw_64;
 	case SCMP_ARCH_MIPS:
 		return &arch_def_mips;
 	case SCMP_ARCH_MIPSEL:
@@ -202,6 +207,8 @@ const struct arch_def *arch_def_lookup_name(const char *arch_name)
 		return &arch_def_arm;
 	else if (strcmp(arch_name, "aarch64") == 0)
 		return &arch_def_aarch64;
+	else if (strcmp(arch_name, "sw_64") == 0)
+		return &arch_def_sw_64;
 	else if (strcmp(arch_name, "loongarch64") == 0)
 		return &arch_def_loongarch64;
 	else if (strcmp(arch_name, "mips") == 0)
diff --git a/src/gen_pfc.c b/src/gen_pfc.c
index bb217c8..39cdfa6 100644
--- a/src/gen_pfc.c
+++ b/src/gen_pfc.c
@@ -63,6 +63,8 @@ static const char *_pfc_arch(const struct arch_def *arch)
 		return "aarch64";
 	case SCMP_ARCH_LOONGARCH64:
 		return "loongarch64";
+	case SCMP_ARCH_SW64:
+		return "sw_64";
 	case SCMP_ARCH_MIPS:
 		return "mips";
 	case SCMP_ARCH_MIPSEL:
diff --git a/tests/16-sim-arch_basic.c b/tests/16-sim-arch_basic.c
index be269c9..67b6e97 100644
--- a/tests/16-sim-arch_basic.c
+++ b/tests/16-sim-arch_basic.c
@@ -81,6 +81,9 @@ int main(int argc, char *argv[])
 	if (rc != 0)
 		goto out;
 	rc = seccomp_arch_add(ctx, SCMP_ARCH_LOONGARCH64);
+	if (rc != 0)
+		goto out;
+	rc = seccomp_arch_add(ctx, SCMP_ARCH_SW64);
 	if (rc != 0)
 		goto out;
 	rc = seccomp_arch_add(ctx, SCMP_ARCH_MIPSEL);
diff --git a/tests/16-sim-arch_basic.py b/tests/16-sim-arch_basic.py
index 79e6854..699a684 100755
--- a/tests/16-sim-arch_basic.py
+++ b/tests/16-sim-arch_basic.py
@@ -41,6 +41,7 @@ def test(args):
     f.add_arch(Arch("arm"))
     f.add_arch(Arch("aarch64"))
     f.add_arch(Arch("loongarch64"))
+    f.add_arch(Arch("sw_64"))
     f.add_arch(Arch("mipsel"))
     f.add_arch(Arch("mipsel64"))
     f.add_arch(Arch("mipsel64n32"))
diff --git a/tests/23-sim-arch_all_le_basic.c b/tests/23-sim-arch_all_le_basic.c
index ef6d2c3..f095893 100644
--- a/tests/23-sim-arch_all_le_basic.c
+++ b/tests/23-sim-arch_all_le_basic.c
@@ -60,6 +60,9 @@ int main(int argc, char *argv[])
 	if (rc != 0)
 		goto out;
 	rc = seccomp_arch_add(ctx, seccomp_arch_resolve_name("loongarch64"));
+	if (rc != 0)
+		goto out;
+	rc = seccomp_arch_add(ctx, seccomp_arch_resolve_name("sw_64"));
 	if (rc != 0)
 		goto out;
 	rc = seccomp_arch_add(ctx, seccomp_arch_resolve_name("mipsel"));
diff --git a/tests/23-sim-arch_all_le_basic.py b/tests/23-sim-arch_all_le_basic.py
index 783dc25..4ce2b01 100755
--- a/tests/23-sim-arch_all_le_basic.py
+++ b/tests/23-sim-arch_all_le_basic.py
@@ -37,6 +37,7 @@ def test(args):
     f.add_arch(Arch("arm"))
     f.add_arch(Arch("aarch64"))
     f.add_arch(Arch("loongarch64"))
+    f.add_arch(Arch("sw_64"))
     f.add_arch(Arch("mipsel"))
     f.add_arch(Arch("mipsel64"))
     f.add_arch(Arch("mipsel64n32"))
diff --git a/tests/regression b/tests/regression
index 32463c0..fda6bcd 100755
--- a/tests/regression
+++ b/tests/regression
@@ -25,6 +25,7 @@ GLBL_ARCH_LE_SUPPORT=" \
 	x86 x86_64 x32 \
 	arm aarch64 \
 	loongarch64 \
+	sw_64 \
 	mipsel mipsel64 mipsel64n32 \
 	ppc64le \
 	riscv64 \
@@ -803,7 +804,7 @@ function run_test_live() {
 
 	# setup the arch specific return values
 	case "$arch" in
-	x86|x86_64|x32|arm|aarch64|loongarch64|parisc|parisc64|ppc|ppc64|ppc64le|ppc|s390|s390x|riscv64|sh|sheb)
+	x86|x86_64|x32|arm|aarch64|loongarch64|parisc|parisc64|ppc|ppc64|ppc64le|ppc|s390|s390x|riscv64|sh|sheb|sw_64)
 		rc_kill_process=159
 		rc_kill=159
 		rc_allow=160
diff --git a/tools/scmp_arch_detect.c b/tools/scmp_arch_detect.c
index c23cf7f..6219408 100644
--- a/tools/scmp_arch_detect.c
+++ b/tools/scmp_arch_detect.c
@@ -81,6 +81,9 @@ int main(int argc, char *argv[])
 		case SCMP_ARCH_AARCH64:
 			printf("aarch64\n");
 			break;
+		case SCMP_ARCH_SW64:
+			printf("sw_64\n");
+			break;
 		case SCMP_ARCH_LOONGARCH64:
 			printf("loongarch64\n");
 			break;
diff --git a/tools/scmp_bpf_disasm.c b/tools/scmp_bpf_disasm.c
index 4572659..93f4f29 100644
--- a/tools/scmp_bpf_disasm.c
+++ b/tools/scmp_bpf_disasm.c
@@ -486,6 +486,8 @@ int main(int argc, char *argv[])
 				arch = AUDIT_ARCH_AARCH64;
 			else if (strcmp(optarg, "loongarch64") == 0)
 				arch = AUDIT_ARCH_LOONGARCH64;
+			else if (strcmp(optarg, "sw_64") == 0)
+				arch = AUDIT_ARCH_SW64;
 			else if (strcmp(optarg, "mips") == 0)
 				arch = AUDIT_ARCH_MIPS;
 			else if (strcmp(optarg, "mipsel") == 0)
diff --git a/tools/scmp_bpf_sim.c b/tools/scmp_bpf_sim.c
index 7d31d79..2427e89 100644
--- a/tools/scmp_bpf_sim.c
+++ b/tools/scmp_bpf_sim.c
@@ -261,6 +261,8 @@ int main(int argc, char *argv[])
 				arch = AUDIT_ARCH_AARCH64;
 			else if (strcmp(optarg, "loongarch64") == 0)
 				arch = AUDIT_ARCH_LOONGARCH64;
+			else if (strcmp(optarg, "sw_64") == 0)
+				arch = AUDIT_ARCH_SW64;
 			else if (strcmp(optarg, "mips") == 0)
 				arch = AUDIT_ARCH_MIPS;
 			else if (strcmp(optarg, "mipsel") == 0)
diff --git a/tools/util.c b/tools/util.c
index 327fc14..49cef4d 100644
--- a/tools/util.c
+++ b/tools/util.c
@@ -46,6 +46,8 @@
 #define ARCH_NATIVE		AUDIT_ARCH_AARCH64
 #elif __loongarch64
 #define ARCH_NATIVE		AUDIT_ARCH_LOONGARCH64
+#elif __sw_64__
+#define ARCH_NATIVE		AUDIT_ARCH_SW64
 #elif __mips__ && _MIPS_SIM == _MIPS_SIM_ABI32
 #if __MIPSEB__
 #define ARCH_NATIVE		AUDIT_ARCH_MIPS
diff --git a/tools/util.h b/tools/util.h
index 24b9ed6..f719411 100644
--- a/tools/util.h
+++ b/tools/util.h
@@ -37,6 +37,17 @@
 #define AUDIT_ARCH_AARCH64	(EM_AARCH64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
 #endif /* AUDIT_ARCH_AARCH64 */
 
+/**
+ * The SW64 architecture tokens
+ */
+/* 64-bit SW64 audit support is not upstream yet */
+#ifndef AUDIT_ARCH_SW64
+#ifndef EM_SW64
+#define EM_SW64 0x9916
+#endif
+#define AUDIT_ARCH_SW64        (EM_SW64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
+#endif /* AUDIT_ARCH_SW64 */
+
 /**
  * The 64-bit LoongArch architecture tokens
  */
-- 
2.45.2

